//-------------------------------------------------------------------------------------------
//                                                                       											|
//   File Name:     transient_150pax.run                                 						|
//   Date(s):       July 22, 2013                                        								|
//   Author:        Metin F. Ozcan                                       								|
//                                                                       											|
//   Description:   File to run CMAPSS40K high BPR SFTF model in transient	|
//                                                                       											|
//-------------------------------------------------------------------------------------------

// Defining the thermodynamics package
setThermoPackage("GasTbl");

//------------------------------------------------------------------------
//                          User-Defined Elements
//------------------------------------------------------------------------
//#include <CoolIt.int>

//------------------------------------------------------------------------
//                            Model Definition 
//------------------------------------------------------------------------
MODELNAME = "CMAPSS40K High BPR SFTF Model Linear Model Generator"; 
AUTHOR = "Metin F. Ozcan"; 

// Minimum and maximum values for the transient driver
// Computed from steady state operation limits
real driver_min, driver_max;

// Including the model and model design point
#include <High_BPR_CMAPSS40K.mdl>
#include <design_point_CMAPSS40K.int>

// Including view out file and print pride function
#include <npss.page.view>
#include <print_macros.fnc>

// Including necessary custom functions
#include <transientDriver.fnc>
#include <solver_setup.fnc>
#include <output_setup.fnc>
#include <linear_model.fnc>

// Determining the solver preferences
solver.defaultTolerance = 0.000001;
solver.maxIterations = 500;
solver.maxJacobians = 100;
solver.maxConvergeFailures = 100;

//----------------------------------------------------------------------------
//  RUN DESIGN POINT
//----------------------------------------------------------------------------

// Inputting the flight conditions
Ambient.alt = 35000.0;
Ambient.MN = 0.8;
Ambient.dTs = 0;

setOption( "switchDes", "DESIGN" );
autoSolverSetup();

// Switching the burner input to fuel to air ratio
Burner.switchBurn = "FAR";

solver.addIndependent("FAR");
// solver.addIndependent("W_design");
solver.addIndependent("BPR_design");
solver.addIndependent("HPT_Eff");
solver.addDependent("Run_Condition_Design");
solver.addDependent("T4_Design");
solver.addDependent("TSFC");

// cout << "Independents are as follows. \n" << endl;
// cout << solver.list("Independent", FALSE) << endl;

// cout << "Dependents are as follows. \n" << endl;
// cout << solver.list("Dependent", FALSE) << endl;
//solver.solutionMode = "ONE_PASS";
run();
// page.display();
// CaseView_SS.update();
// CaseView_SS.display();
// printPride();

//----------------------------------------------------------------------------
//  RUN OFFDESIGN POINT
//----------------------------------------------------------------------------

// Minimum and maximum values for the transient operation driver

// Fan percent corrected shaft speed
driver_min = 40;
driver_max = 100;

// LPC percent corrected shaft speed
// driver_min = 42.7702;
// driver_max = 100;

// HPC percent corrected shaft speed
// driver_min = 92.274;
// driver_max = 100;

// Running the model at high power setting
real Fan_NcPct_target = driver_max;
// real LPC_NcPct_target = driver_min;
// real HPC_NcPct_target = driver_min;

// Setting up the solver for the steady state case
SS_Setup();

// Inputting the flight conditions
Ambient.alt = 0.0;
Ambient.MN = 0.0;
Ambient.dTs = 0.0;

solver.postExecutionSequence.append("CaseView_SS");

CASE++;
// Running the steady state case
run();
CaseView_SS.display();
page.display();

cout << "\nHigh power successful! \n" << endl;

cout << "Fnet: " << Perf.myFn << endl;

// cout << "Fan NcPct: " << Fan.NcPct << endl;
// cout << "LPC NcPct: " << LPC.NcPct << endl;
// cout << "HPC NcPct: " << HPC.NcPct << endl;

// Recording the maximum allowable fuel flow rate
// real Wfuel_max = Burner.Wfuel;

// driver_max = Wfuel_max; // Uncomment if you want to run to fuel flow rate in transient

cout << "\n" << "Max fuel flow rate: " << Burner.Wfuel << endl;

run_linear();

//----------------------------------------------------------------------------------
// Power hook at SLS - Linearization at each point
//----------------------------------------------------------------------------------
real Fan_NcPct_targets[]={90, 80, 70, 60, 50}; 
int z;
for ( z=0; z < Fan_NcPct_targets.entries(); ++z ) { //loop through Fan_NcPct_targets
    Fan_NcPct_target = Fan_NcPct_targets[z];
    CASE++;
    run();
    CaseView_SS.display();
    page.display();

    run_linear();
}

// Running the model at low power setting
Fan_NcPct_target = driver_min;
// LPC_NcPct_target = driver_max;
// HPC_NcPct_target = driver_max;

CASE++;
run();
CaseView_SS.display();
page.display();

cout << "\nLow power successful! \n" << endl;

cout << "Fnet: " << Perf.myFn << endl;

// Recording minimum allowable fuel flow rate
// real Wfuel_min = Burner.Wfuel;

// driver_min = Wfuel_min; // Uncomment if you want to run to fuel flow rate in transient

cout << "\n" << "Min fuel flow rate: " << Burner.Wfuel << endl;

run_linear();

//----------------------------------------------------------------------------------
// Increasing Fan NcPct to move onto other flight conditions
//----------------------------------------------------------------------------------
Fan_NcPct_targets={50, 60, 70, 80, 90, 100};
for ( z=0; z < Fan_NcPct_targets.entries(); ++z ) { //loop through Fan_NcPct_targets
    Fan_NcPct_target = Fan_NcPct_targets[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Increasing Mach number at SL for hot day take off
//----------------------------------------------------------------------------------
real MNs[]={0.1, 0.2, 0.25};
for ( z=0; z < MNs.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.MN = MNs[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Increasing temperature offset at SL for hot day take off
//----------------------------------------------------------------------------------
real dTs[]={10, 20, 30, 40};
for ( z=0; z < dTs.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.dTs = dTs[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Linearization at hot day take off
//----------------------------------------------------------------------------------

Ambient.dTs = 50;
CASE++;
run();
CaseView_SS.display();
page.display();

run_linear();

//----------------------------------------------------------------------------------
// Lowering temperature offset
//----------------------------------------------------------------------------------
dTs={40, 30, 20, 10, 0};
for ( z=0; z < dTs.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.dTs = dTs[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Increasing altitude to 5,000 ft from SL
//----------------------------------------------------------------------------------
real alts[]={2500, 5000};
for ( z=0; z < alts.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.alt = alts[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Increasing Mach number from 0.25 to 0.4 at 5,000 ft
//----------------------------------------------------------------------------------
MNs={0.3, 0.35, 0.40};
for ( z=0; z < MNs.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.MN = MNs[z];
    CASE++;
    run();
}
CaseView_SS.display();
page.display();

run_linear();

//----------------------------------------------------------------------------------
// Increasing altitude from 5,000 ft to 10,000 ft at M = 0.4
//----------------------------------------------------------------------------------
alts={6000, 7000, 8000, 9000, 10000};
for ( z=0; z < alts.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.alt = alts[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Increasing Mach number from 0.4 to 0.5 at 10,000 ft
//----------------------------------------------------------------------------------
MNs={0.45, 0.50};
for ( z=0; z < MNs.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.MN = MNs[z];
    CASE++;
    run();
}
CaseView_SS.display();
page.display();

run_linear();

//----------------------------------------------------------------------------------
// Increasing altitude from 10,000 ft to 15,000 ft at M = 0.5
//----------------------------------------------------------------------------------
alts={ 11000, 12000, 13000, 14000, 15000};
for ( z=0; z < alts.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.alt = alts[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Increasing Mach number from 0.5 to 0.65 at 15,000 ft
//----------------------------------------------------------------------------------
MNs={0.55, 0.60, 0.65};
for ( z=0; z < MNs.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.MN = MNs[z];
    CASE++;
    run();
}
CaseView_SS.display();
page.display();

run_linear();

//----------------------------------------------------------------------------------
// Increasing altitude from 15,000 ft to 20,000 ft at M = 0.65
//----------------------------------------------------------------------------------
alts={ 16000, 17000, 18000, 19000, 20000};
for ( z=0; z < alts.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.alt = alts[z];
    CASE++;
    run();
}
CaseView_SS.display();
page.display();

run_linear();

//----------------------------------------------------------------------------------
// Increasing altitude from 20,000 ft to 25,000 ft at M = 0.65
//----------------------------------------------------------------------------------
alts={ 21000, 22000, 23000, 24000, 25000};
for ( z=0; z < alts.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.alt = alts[z];
    CASE++;
    run();
}
CaseView_SS.display();
page.display();

run_linear();

//----------------------------------------------------------------------------------
// Increasing altitude from 25,000 ft to 30,000 ft at M = 0.65
//----------------------------------------------------------------------------------
alts={ 26000, 27000, 28000, 29000, 30000};
for ( z=0; z < alts.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.alt = alts[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Increasing Mach number from 0.65 to 0.75 at 30,000 ft
//----------------------------------------------------------------------------------
MNs={0.7, 0.75};
for ( z=0; z < MNs.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.MN = MNs[z];
    CASE++;
    run();
}
CaseView_SS.display();
page.display();

run_linear();

//----------------------------------------------------------------------------------
// Increasing altitude from 30,000 ft to 35,000 ft at M = 0.75
//----------------------------------------------------------------------------------
alts={ 31000, 32000, 33000, 34000, 35000};
for ( z=0; z < alts.entries(); ++z ) { //loop through Fan_NcPct_targets
    Ambient.alt = alts[z];
    CASE++;
    run();
}

//----------------------------------------------------------------------------------
// Increasing Mach number from 0.75 to 0.80 at 35,000 ft
//----------------------------------------------------------------------------------

Ambient.MN = 0.80;
CASE++;
run();
CaseView_SS.display();
page.display();

run_linear();

//----------------------------------------------------------------------------------
// Power hook at cruise condition (0.80 at 35,000 ft)
//----------------------------------------------------------------------------------
Fan_NcPct_targets={90, 80, 70, 60}; 

for ( z=0; z < Fan_NcPct_targets.entries(); ++z ) { //loop through Fan_NcPct_targets
    Fan_NcPct_target = Fan_NcPct_targets[z];
    CASE++;
    run();
    CaseView_SS.display();
    page.display();

    run_linear();
}