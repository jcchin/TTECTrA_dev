//              P I P S I - B A S E D   I N L E T   
//         I N S T A L L A T I O N   S U B E L E M E N T

//  This subelement computes the ram recovery and installation drag
//  for the inlet using the PIPSI map set.  The PIPSI methodology is
//  documented in NASA CR 159691 "A Computer Code for Estimating
//  Installed Performance of Aircraft Gas Turbine Engines", by Edward
//  J. Kowalski, Boeing Military Airplance Company, 1979. In addition
//  to ram recovery and installation drag, this subelement will
//  calculate the bypass and bleed flow rate for the parent inlet when
//  in off-design mode.

//  Note: The ratio of the freestream cross sectional area of two
//  flows is equal to the ratio of the flow rate of those two flows
//  (e.g. Ain/Acapture == Win/Wcapture). Thus the area ratios and the
//  mass flow ratios can be, and are, used interchangably.

class PipsiInletSub extends Subelement {

  // I N P U T   P A R A M E T E R S
  real Acapture {
	 value = 0.0 ;
	 IOstatus = "input" ;
	 description = "Projected area of the inlet" ;
	 units = "in2" ; 
  }
  real eRamMap {
	 value = 1.0 ;
	 IOstatus = "input" ;
	 description = "Value obtained from Table 2A of the PIPSI map set" ;
  }
  real s_eRam {
	 value = 1.0 ;
	 IOstatus = "input" ;
	 description = "Multiplier on the map value of ram recovery" ;
  }
  real a_eRam {
	 value = 0.0 ;
	 IOstatus = "input" ;
	 description = "Adder on the map value of ram recovery" ;
  }
  real CdSpillMap {
	 value = 0.0 ;
	 IOstatus = "input" ;
	 description = "Map value of the spillage drag coefficient." ;
  }
  real s_CdSpill {
	 value = 1.0 ;
	 IOstatus = "input" ;
	 description = "Multiplier on CdSpillMap" ;
  }
  real a_CdSpill {
	 value = 0.0 ;
	 IOstatus = "input" ;
	 description = "Adder on CdSpillMap" ;
  }
  real CdBleedMap {
	 value = 0.0 ;
	 IOstatus = "input" ;
	 description = "Map value of the bleed flow drag coefficient." ;
  }
  real s_CdBleed {
	 value = 1.0 ;
	 IOstatus = "input" ;
	 description = "Multiplier on CdBleedMap" ;
  }
  real a_CdBleed {
	 value = 0.0 ;
	 IOstatus = "input" ;
	 description = "Adder on CdBleedMap" ;
  }
  real CdBypassMap {
	 value = 0.0 ;
	 IOstatus = "input" ;
	 description = "Map value of the bypass flow drag coefficient." ;
  }
  real s_CdBypass {
	 value = 1.0 ;
	 IOstatus = "input" ;
	 description = "Multiplier on CdBypassMap" ;
  }
  real a_CdBypass {
	 value = 0.0 ;
	 IOstatus = "input" ;
	 description = "Adder on CdBypassMap" ;
  }
  
  

  // O U T P U T   P A R A M E T E R S

  real A0I {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Ratio of inlet flow area to capture area." ;
  }
  real A0 {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Ratio of engine supply flow area to capture area." ;
  }
  real A0eng {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Ratio of engine demand flow area to capture area." ;
  }
  real A0bleed {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Ratio of bleed flow area to capture area." ;
  }
  real A0bypass {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Ratio of bypass flow area to capture area." ;
  }
  real Cd {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Total installation drag coefficient." ;
  }
  real CdBleed {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Scaled value of the bleed flow drag coefficient." ;
  }
  real CdBypass {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Scaled value of the bypass flow drag coefficient." ;
  }
  real CdSpill {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Scaled value of the spillage drag coefficient." ;
  }
  real Q {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "The local dynamic pressure in the inlet." ;
  }  
  real Wcapture {
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Airflow through the capture area." ;
	 units = "lbm/sec" ; 
  }

  // O P T I O N   A N D   T R I G G E R   P A R A M E T E R S

  // No mode variables. Subelement doesn't have a DESIGN fork, so
  // don't define the variable.

  void calculate() {	
	 
	 // Calculate the mass flow rate through the capture area units
	 // on Acapture in in**2, convert to ft**2

	 Wcapture = (Acapture/ 144) * LocalIn.Vflow * LocalIn.rhos ;		

	 // Check the local Mach number coming from the parent. If it is
	 // equal to greater than 0.05, then use it to look up table
	 // values. 

	 // If it is less, then just arbitrarily set the values. At such a
	 // low speed, the installed drag can be assumed to be zero



	 if(MNlocal >= 0.05) {
	
		// Given the demand engine flow rate calculate the engine to
		// capture area ratio

		A0eng = Wengine / Wcapture ;

		// Read Table 7 to get the map value of ARbypass and then apply
		// the scalar and adder to get final value of ARbypass.  Then
		// determine the bypass mass flow rate

		A0bypass = Tb_7(MNlocal, A0eng) ;

		Wbypass = A0bypass * Wcapture ;
		if ( Wbypass < 0.0 ) { Wbypass = 0.0; }        // SMJ

		// Calculate the engine supply mass flow and the engine supply
		// to capture freestream area ratio unit conversion 1 ft**2 =
		// 144 in**2
		
		W0 = Wengine + Wbypass ;
		
		A0 = W0 / Wcapture ;

		// Check this against the buzz and distortion area ratio limits.

		//if(A0 <= Tb_2D(MNlocal)) {
		//  cerr << "WARNING: Buzz Area Ratio Limit exceeded\n";
		//}
		//if(A0 >= Tb_2E(MNlocal)) {
		//  cerr << "WARNING: Distortion Area Ratio Limit exceeded\n";
		//}

		// Read Table 6A to get the bleed to capture freestream area
		// ratio and determine the bleed mass flow rate
		
		A0bleed = Tb_6A(MNlocal, A0) ;

		Wbleed = A0bleed * Wcapture ; 
		if ( Wbleed < 0.0 ) { Wbleed = 0.0; }          // SMJ

		// Calculate the total inlet mass flow rate and the total inlet
		// to capture freestream ratio.

		W0I = W0 + Wbleed ;
		A0I = W0I / Wcapture ;

		// RAM RECOVERY CALCULATION
		
		// Read the ram recovery map (Map 2) and scale the resulting
		// map values. Note, the A0 for MNlocals below 0.05 will be
		// artificially low, since the Mach number used to obtain it 
		// has a lower limit of 0.05.

		eRamMap = Tb_2A(MNlocal, A0) ;
		if ( eRamMap < 0.7 ) {                        // SMJ
		  cerr << "CHECK INLET RECOVERY " << eRamMap <<" \n"; 
		  eRamMap = 0.80; 
		  Wengine = Wengine * 0.90; 
		}
		eRam = s_eRam * eRamMap + a_eRam ;

		// Use the values of A0I, A0bleed, and A0bypass to read Tables
		// 3, 4, and 5 to get the drag coefficients due to these
		// individual sources.

		CdSpillMap = Tb_3(MNlocal, A0I) ;
		CdBleedMap = Tb_4(MNlocal, A0bleed) ;
		CdBypassMap = Tb_5(MNlocal, A0bypass) ;
	 }
	 else {

		// MNlocal below the cutoff point. Below this speed the area
		// ratios used to read the maps rapidly go to infinity as
		// Wcapture goes to zero. Set the areas and area ratios to zero
		// and get eRamMap from the matched flow eRam Vs MNlocal table
		// that doesn't depend on A0.

		A0eng = 1.0 ;
		A0bypass = 0.0 ;
		Wbypass = 0.0 ;
		W0 = Wengine ;
		A0 = 0.0 ;
		A0bleed = 0.0 ;
		Wbleed = 0.0 ;
		W0I = W0 ;
		A0I = 1.0 ;
		CdSpillMap = 0.0 ;
		CdBleedMap = 0.0 ;
		CdBypassMap = 0.0 ;
		eRamMap = Tb_2B(MNlocal) ;
		eRam = s_eRam * eRamMap + a_eRam ;

	 }

	 // Scale the map values

	 CdSpill = s_CdSpill * CdSpillMap + a_CdSpill ;
	 CdBleed = s_CdBleed * CdBleedMap + a_CdBleed ;
	 CdBypass = s_CdBypass * CdBypassMap + a_CdBypass ;


	 // Sum to get the total installed drag coefficients

	 Cd = CdSpill + CdBleed + CdBypass ;


	 // Calculate the dynamic pressure at the LocalIn of the parent
	 // 1 lbm = 1/(32.174 lbf * s**2 / ft), 1 ft**2 = 144 in**2
		
	 Q = (0.5 * LocalIn.rhos * LocalIn.Vflow ** 2) / (32.174 * 144) ;


	 // Calculate the installed drag

	 Dinstall = Cd * Q * Acapture ;

  } // end execute()

} // end PipsiInletSub
