#ifndef __COMPRESSORMAP_MOD__
#define __COMPRESSORMAP_MOD__

// ****************************************************************************
// * NASA Glenn Research Center
// * 21000 Brookpark Rd
// * Cleveland, OH 44135
// *
// ****************************************************************************

#include <InterpIncludes.ncp>

extern real Nc;
extern real Wc;
extern real eff;
extern real SMW;
extern real SMN;
extern real PR;
extern real WcBase;

class CompressorMap_mod extends Subelement {

//------------------------------------------------------------
//     ******* DOCUMENTATION *******
//------------------------------------------------------------

  title = "";

  description = isA() + " manages the calculation of compressor performance for efficiency based maps.";

  usageNotes = isA() +
" 

- NOTE TO USERS: This subelement is becoming obsolete.  It will not
accept the design values from the parent.  You must still enter them
here.

- This subelement manages the compressor performance calculations for
an efficiency based map.  It is responsible for matching the unscaled
map data based on design data supplied by the user.  Additionally,
it is also responsible for performing the overall compressor mass
balance.  The compressor default solver independent and dependent are
located at this level.

- This subelement has three sockets that perform the actual performance
calculations.  The map socket calculates the unscaled compressor 
performance based on the user supplied maps.  The humidity effects
socket calculates adjustment factors based on changes in humidity.  
The Reynolds effects socket calculates adjustment factor based on 
changes in Reynolds number.";

  background = "";

//------------------------------------------------------------
//     ******* SETUP VARIABLES ********
//------------------------------------------------------------

  real a_alpha {
    value = 0;  IOstatus = INPUT;  units = DEG;
    description = "Adder on map stator vane angle";
  }
  real alpha {
    value = 0;  IOstatus = INPUT;  units = DEG;
    description = "Input stator vane angle";
  }
  real alphaMap {
    value = 0;  IOstatus = OUTPUT;  units = DEG;
    description = "Map stator vane angle, passed to S_eff";
  }
  real effDes {
    value = 1;  IOstatus = INPUT;  units = NONE;
    description = "Design point value of adiabatic efficiency";
  }
  real effMap {
    value = 1;  IOstatus = INPUT;  units = NONE;
    description = "Map adiabatic efficiency, calculated from S_eff";
  }
//   real eff_ret {
//     value = 1;  IOstatus = OUTPUT;  units = NONE;
//     description = "Efficiency calculated and returned to the parent";
//   }
  real gamtMap {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Map ratio of total gas specific heats, passed to S_hum";
  }
  real NcDes {
    value = 0;  IOstatus = INPUT;  units = RPM;
    description = "Corrected speed at design";
  }
  real NcMap {
    value = 0;  IOstatus = OUTPUT;  units = NONE;
    description = "Map percent corrected design speed, passed to S_eff ";
  }
//   real PR_ret {
//     value = 1;  IOstatus = INPUT;  units = NONE;
//     description = "Returned to parent";
//   }
  real PRdes {
    value = 1;  IOstatus = INPUT;  units = NONE;
    description = "Pressure ratio at design";
  }
  real PRmap {
    value = 1;  IOstatus = INPUT;  units = NONE;
    description = "Map pressure ratio, calculated from S_eff, passed to S_hum";
  }
  real PRmapWAR {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Map pressure ratio for specific humidity effects, calculated from S_hum";
  }
  real ReDes {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Reynolds number at design, passed to S_Re";
  }
  real RlineMap {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Map R line, passed to S_eff";
  }
  real RtMap {
    value = 0;  IOstatus = INPUT;  units = BTU_PER_LBM_R;
    description = "Map total gas constant, passed to S_hum";
  }
  real s_alpha {
    value = 1;  IOstatus = INPUT;  units = NONE;
    description = "Scalar on stator vane angle";
  }
  real s_effDes {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Scalar on adiabatic efficiency at design";
  }
  real s_effRe {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Scalar on adiabatic efficiency for Reynolds effects, calculated from S_Re";
  }
  real s_NcDes {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Scalar on corrected speed design";
  }
  real s_NcWAR {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Scalar on specific humidity effects for corrected speed, calculated from S_hum";
  }
  real s_PRdes {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Pressure ratio design scalar, passed to S_eff";
  }
  real s_WcDes {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Corrected flow design scalar";
  }
  real s_WcRe {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Scalar for corrected mass flow for Reynolds Effect, calculated from S_Re";
  }
  real s_WcWAR {
    value = 1;  IOstatus = OUTPUT;  units = NONE;
    description = "Specific humidity effects scalar on corrected flow, calculated from S_hum";
  }
  real SMNmap {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Map stall margin at constant speed, calculated from S_eff";
  }
//   real SMN_ret {
//     value = 0;  IOstatus = INPUT;  units = NONE;
//     description = "Map stall margin at constant speed returned to parent";
//   }
  real SMWmap {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Map stall margin at constant flow, calculated from S_eff";
  }
//   real SMW_ret {
//     value = 0;  IOstatus = INPUT;  units = NONE;
//     description = "Map stall margin at constant flow returned to parent";
//   }
  real WcDes {
    value = 0;  IOstatus = INPUT;  units = LBM_PER_SEC;
    description = "Corrected flow at design, passed to S_Re";
  }
  real WcMap {
    value = 0;  IOstatus = INPUT;  units = LBM_PER_SEC;
    description = "Map corrected flow, calculated from S_eff";
  }
  real RNI_des {
    value = 0;  IOstatus = INPUT;  units = NONE;
    description = "Map RNI Design";
  }

//   real Wc_ret {
// 	 value = 0; IOstatus = OUTPUT; units = LBM_PER_SEC;
// 	 description = "Output corrected flow";
//   }

//------------------------------------------------------------
//   ******* OPTION VARIABLE SETUP *******
//------------------------------------------------------------

  Option switchDes {
    allowedValues = { DESIGN, OFFDESIGN };
    description = "Design mode switch indicator [ DESIGN / OFFDESIGN]";
    rewritableValues = FALSE;  // Enables converter optimization.
  }
  
//------------------------------------------------------------
// ****** SETUP PORTS, FLOW STATIONS, SOCKETS, TABLES ********
//------------------------------------------------------------

// FLUID PORTS

// FUEL PORTS

// BLEED PORTS

// THERMAL PORTS

// MECHANICAL PORTS

// FLOW STATIONS
  FlowStation Fl_O {
    description = "internal outlet flow station for exit conditions for an actual compression process ";
  }
  FlowStation Fl_Oideal {
    description = "internal outlet flow station for exit conditions for an ideal compression process ";
  }

// SOCKETS
  addInterface( "COMPRESSOR_MAP" );

  Socket S_eff {
    allowedValues = { "WcMap", "PRmap", "effMap", "SMWmap", "SMNmap" };
    description = "compressor efficiency map socket";
    socketType = COMPRESSOR_EFFICIENCY_MAP;
  }
  
  Socket S_hum {
    allowedValues = { "s_NcWAR", "s_WcWAR", "PRmapWAR" };
    description = "Compressor humidity effects socket";
    socketType = COMPRESSOR_HUMIDITY_EFFECTS;
  }
  
  Socket S_Re {
    allowedValues = { "s_WcRe", "s_effRe" };
    description = "Compressor Reynolds effects socket";
    socketType = COMPRESSOR_REYNOLDS_EFFECTS;
  }

// TABLES


//------------------------------------------------------------
// ******* INTERNAL SOLVER SETUP *******
//------------------------------------------------------------

//------------------------------------------------------------
//  ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
//------------------------------------------------------------

  Independent ind_RlineMap {
    varName = "RlineMap";
    description = "Compressor operating point independent";
  }
  
  Dependent dep_errWc {
    eq_lhs = "Wc";
    eq_rhs = "WcCalc";
    description = "Flow error dependent";
  }
  
//------------------------------------------------------------
// ******* VARIABLE CHANGED METHODOLOGY *******
//------------------------------------------------------------
  void variableChanged( string name, any oldVal ) {
	 
    if (name =="switchDes") {
      // variables change IO status depending switchDes status
      if (switchDes == DESIGN) {
		  NcDes.IOstatus = INPUT;
		  PRdes.IOstatus = INPUT;
		  WcDes.IOstatus = INPUT;
		  effDes.IOstatus = INPUT;
		  s_effDes.IOstatus = OUTPUT;
		  s_NcDes.IOstatus = OUTPUT;
		  s_PRdes.IOstatus = OUTPUT;
		  s_WcDes.IOstatus = OUTPUT;
	ind_RlineMap.autoSetup = FALSE;
	dep_errWc.autoSetup = FALSE;
      } 
      else if (switchDes == OFFDESIGN) {
		  NcDes.IOstatus = OUTPUT;
		  PRdes.IOstatus = OUTPUT;
		  WcDes.IOstatus = OUTPUT;
		  effDes.IOstatus = OUTPUT;
		  s_NcDes.IOstatus = INPUT;
		  s_PRdes.IOstatus = INPUT;
		  s_WcDes.IOstatus = INPUT;
		  s_effDes.IOstatus = INPUT;
	ind_RlineMap.autoSetup = TRUE;
	dep_errWc.autoSetup = TRUE;	  
      }
    } 
  }
  

//------------------------------------------------------------
//   ******* PERFORM VERIFY FUNCTIONS *******
//------------------------------------------------------------
int verify(){
  
  // tell the parent element that it is dealing with an
  // efficienciency map
  //  switchMap = "EFF";

  return TRUE;  
 
}

//------------------------------------------------------------
//   ******* PERFORM ENGINEERING CALCULATIONS *******
//------------------------------------------------------------
  void calculate() {
    

	 //----------------------------------------------------------------------
	 //get variables from parent
	 //----------------------------------------------------------------------
	 real NcBase_local = Nc;
	 real Wc_local = Wc;


    //----------------------------------------------------------------------
    // calculate map alpha
    //----------------------------------------------------------------------
    alphaMap = s_alpha * alpha + a_alpha;
    
    //-------------------------------------------------------------------
    // execute humidity effects socket - correction for Gamma & R effects
    // this subelement has to be executed twice
    // it is executed here to determine a speed scale factor before the
    // tables are read
    //-------------------------------------------------------------------		
    if (!S_hum.isEmpty()) {
      S_hum.execute();
    }
    
    //----------------------------------------------------------------------
    // Begin design calculations 
    // On the design fork, first normalize the map to design input values
    // of corrected speed, alpha, and Rline values  
    // Then scale the output values of corrected flow and pressure ratio to 
    //  match design demand values
    //----------------------------------------------------------------------
    if ( switchDes == DESIGN ) {

      NcMap = NcDes;
      WcDes = Wc_local;
      
      //-------------------------------------------------------------------
      // execute efficiency map socket if not empty  
      //-------------------------------------------------------------------
      if (!S_eff.isEmpty()) {
		  S_eff.execute();
      }

      
      //-------------------------------------------------------------------
      // execute Reynolds effects socket if not empty 
      //-------------------------------------------------------------------
      if (!S_Re.isEmpty()) {
		  S_Re.execute();
      }
      
      //-------------------------------------------------------------------
      // execute humidity effects socket if not empty
      // it is executed here to scale the map return values
      //-------------------------------------------------------------------
      PRmapWAR = PRmap ;
      
      if (!S_hum.isEmpty()) {
		  S_hum.execute();
      }
		
      //-------------------------------------------------------------------
      // calculate the design scalars
      //-------------------------------------------------------------------
      s_PRdes = ( PRdes - 1.0 ) / ( PRmapWAR - 1.0 );
      s_effDes = effDes /( s_effRe * effMap );
      s_WcDes  = WcDes / ( s_WcWAR * s_WcRe * WcMap );
      s_NcDes = NcMap * NcDes * s_NcWAR / NcBase_local;
      
    }
	 
    //----------------------------------------------------------------------
    // continue with off-design calculations
    //----------------------------------------------------------------------
    
    //----------------------------------------------------------------------
    // correct the basemap speed for Gamma and R effects
    //----------------------------------------------------------------------
    NcMap = s_NcDes * NcBase_local / s_NcWAR / NcDes ;
    
    //----------------------------------------------------------------------
    // execute efficiency map socket if not empty
    //----------------------------------------------------------------------  
    if (!S_eff.isEmpty()) {
      S_eff.execute();
    }
	 
    //----------------------------------------------------------------------
    // execute Reynolds effects socket if not empty
    //----------------------------------------------------------------------
    if (!S_Re.isEmpty()) {
      S_Re.execute();
    }
    
    //----------------------------------------------------------------------
    // execute humidity effects socket if not empty. 
    // it is scaled here to scale the map return values
    //----------------------------------------------------------------------
    PRmapWAR = PRmap ;
    
    if (!S_hum.isEmpty()) {
      S_hum.execute();
    }

// 	 real Wc_ret, eff_ret, SMW_ret, SMN_ret, PR_ret;
// 	 Wc_ret  = s_WcDes * s_WcWAR * s_WcRe * WcMap ;

    //----------------------------------------------------------------------
    // calculate socket variables
    //----------------------------------------------------------------------
//     PR_ret = 1.0 + s_PRdes * ( PRmapWAR - 1.0 ) ;
//     eff_ret = s_effDes * s_effRe * effMap ;
//     SMW_ret = SMWmap  ;
//     SMN_ret = SMNmap ;
   
    //----------------------------------------------------------------------
	 // set value in parent
    //----------------------------------------------------------------------
	 eff = s_effDes * s_effRe * effMap ; // eff_ret;
	 SMW = SMWmap  ; // SMW_ret;
	 SMN = SMNmap ; // SMN_ret;
	 PR =  1.0 + s_PRdes * ( PRmapWAR - 1.0 ) ;  // PR_ret;
	 WcBase =  s_WcDes * s_WcWAR * s_WcRe * WcMap ; //Wc_ret;	
  }
  
}


