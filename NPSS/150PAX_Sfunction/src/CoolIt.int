/* ******************************************************
*  File Name: CoolIt.int
*  Date: February 8, 2012
*  Created by: Addison Dunn
*  Last Edited: February 9, 2012
*  By: Addison Dunn
*  For: Aerospace Systems Design Lab @ Georgia Tech
*******************************************************	*/

#include <InterpIncludes.ncp>

class CoolIt extends Subelement {
	
	//Documentation
	title = "TURBINE COOLING ELEMENT";
	
	description =
	"This element will calculate the amount of cooling flow required to cool
	a turbine.  The calculations are based on input metal temperature, internal 
	cooling effectiveness, film cooling efectiveness, and TBC properties. Algorithm
	based on the method outlined in: J.B. Young, R.C. Wilcock, Modeling the
	Air-Cooled Gas Turbine: Part 2 — Coolant Flows and Losses";
	
	// Setup Variables
	
	socketRequired = 0;
	
	real WbleedC1, WbleedIn1, WbleedC2, WbleedIn2;
	
	Option switchDes {
		allowedValues = { DESIGN, OFFDESIGN }
		description = "Design mode switch indicator [DESIGN / OFFDESIGN]";
	}

	Dependent dep_BleedFlow1Min {
		eq_lhs = "WbleedIn1";
		eq_rhs = "0.0";
		description = "Error to balance out calculated and actual bleed flow";
		eq_Ref = "1.0";	
	}
	
	Dependent dep_BleedFlow2Min {
		eq_lhs = "WbleedIn2";
		eq_rhs = "0.0";
		description = "Error to balance out calculated and actual bleed flow";
		eq_Ref = "1.0";	
		toleranceType = "ABSOLUTE";
	}
	
	Dependent dep_BleedFlow1 {
		eq_lhs = "WbleedC1";
		eq_rhs = "WbleedIn1";
		description = "Error to balance out calculated and actual bleed flow";
		eq_Ref = "1.0";	
		//constraintNameList = {"dep_BleedFlow1Min"};  
		//limitTypes={"MIN"}; 
	    toleranceType = "ABSOLUTE";
	}
	
	Dependent dep_BleedFlow2 {
		eq_lhs = "WbleedC2";
		eq_rhs = "WbleedIn2";
		description = "Error to balance out calculated and actual bleed flow";
		eq_Ref = "1.0"; 
 		//constraintNameList = {"dep_BleedFlow2Min"};  
		//limitTypes={"MIN"}; 
		toleranceType = "ABSOLUTE";
	}

	
	
	// Technology Inputs 
	
	real Bi_m {
		value = 0.2;
		IOstatus = "input";
		description = "Turbine Blade Metal Biot Number"; 
	}
	
	real l_tbc_rotor {
		//value = 1.34e-5;
		value = 1.2035e-5;
		IOstatus = "input";
		//units = "Btu/R*s*in";
		description = "Thermal barrier coating thermal conductivity"; 
	}
	
	real l_tbc_vane {
		//value = 1.34e-5;
		value = 1.2035e-5;
		IOstatus = "input";
		//units = "Btu/R*s*in";
		description = "Thermal barrier coating thermal conductivity"; 
	}	
  
	real n_cint {
		value = 0.7;
		IOstatus = "input";
		description = "Internal cooling efficiency"; 
	}
  
	real e_f {
		value = 0.6;
		IOstatus = "input";
		description = "Film cooling effectiveness"; 
	}
	
	real t_tbc_rotor {
		value = 0.001;
		IOstatus = "input";
		//units = "inches";.
		description = "Thermal barrier coating thickness"; 
	}
	
	real t_tbc_vane {
		value = 0.001;
		IOstatus = "input";
		//units = "inches";.
		description = "Thermal barrier coating thickness"; 
	}	
	
	real rLeak {
		value = (4. / 3.);
		IOstatus = "input";
		description = "correction factor for leakage"; 
	}
	
	// Geometry
	
	int nStages {
		value = 1;
		IOstatus = "input";
		description = "Number of stages "; 
	}
	
	int nStagesCool {
		value = 4;
		IOstatus = "input";
		description = "Number of cooled stages (maximum = 10)"; 
	}	
	
	int nStageCoolCalc {
		value = 1;
		IOstatus = "output";
		description = "Number of cooled stages used in counter"; 	
	
	}
  
	// Values in these arrays are in row order {stator1,rotor1,stator2,rotor2,...}
	int n_blade[20]; // number of blades in each row
	real AR[20]; // blade aspect ratio
	real chord_blade[20]; // blade length, in
	real radius_hub[20]; // turbine hub radius,in
	real radius_tip[20]; // turbine tip radius,in
	real length_stage[20]; // stage length, in
	real TOC[20]; // blade average thickness to chord ratio
	real A_cs[20]; // cross-sectional area, in^2
	real K_comb[20]; // Combustion Pattern Factor

	real bladeFlow[10], vaneFlow[10]; // cooling mass flow arrays
	real desBladeTemp[10], desVaneTemp[10]; // design metal temperatures
	
	// Initializations
	
	string cool1;
	string cool2;
	
	real xFactor; // Cooling flow weighting factor.
	real xFactor1;
	
	// Declare working flow stations
	FlowStation Fl_W;
	FlowStation Fl_cool;
	
	// turn on solver variables if in design mode
	void variableChanged( string name, any oldVal ) {
		if ( name == "switchDes" ) {
			if ( switchDes == "DESIGN" ) {
				dep_BleedFlow1.autoSetup = TRUE;
				dep_BleedFlow2.autoSetup = TRUE;
			}
			else {
				dep_BleedFlow1.autoSetup = FALSE;
				dep_BleedFlow2.autoSetup = FALSE;
			}
		}
	}

	void calculate() {
		
		// declare variables for use in the calculations
		int i,j; // loop indices
		int kVane; // +1 if stator, -1 if rotor
		int nRows; // number of blade rows
		real a_g; // Gas mean heat transfer coefficient, Btu/R*s*in^2
		real A_surf; // Cooled surface area	
		real dH; // Power extracted from each turbine stage.
		real phi; // Cooling effectiveness
		real Ttg; // Total temperature of gas flow relative to blade and accounting for combustion pattern factor
		real tMetal; // Allowable metal temperature
		real V_axial; // Axial velocity, ft/s, assumed constant throughout turbine
		real Ttg_rel; // Total temperature of gas flow relative to rotor blade, Rankine
		real length_blade; // blade spane, in
		real U_mean; // mean blade speed, ft/s
		real V_tangential; // absolute tangential velocity assuming no tangential velocity leaving rotor, ft/s
		real A_blade; // blade planform area
		real A_blade_cs; // blade cross-sectional area
		real Re; // Reynolds Number
		real St; // Stanton Number
		real Bi_tbc; //thermal barrier coating Biot number
		real Bi, denom; // intermediate calculation variables
		real T_aw; // adiabatic wall temperature
		real T_w; // actual wall temperature
		real T_mint; // interior metal temperature
		real Tt_cx; // cooling temperature at blade passage exit
		real m_cplus; // non-dimensional cooling flow
		real V_rel; // flow velocity relative to rotor

		// Initializations
		Fl_W.copyFlow( "Fl_I" );
		Fl_cool.copyFlow( cool1 );
		WbleedIn1 = Fl_cool.W;
		Fl_cool.copyFlow( cool2 );
		WbleedIn2 = Fl_cool.W;
		Fl_cool.copyFlow( cool1 );
		WbleedC1 = 0;
		WbleedC2 = 0;
		V_axial = Fl_I.V;
		kVane = -1;
		
		nStageCoolCalc = min(nStages,nStagesCool);
		nRows = 2. * nStageCoolCalc;		
		
		//nRows = 2. * nStages;
		
		// determine the ethalpy change for an individual stage, Btu/s
		dH = pwrExpand /( nStages * 1.41485 );
		
		
			
		// intialize all the bleed flows to zero
		for ( i = 0; i < nStageCoolCalc; i++ ) {
			bladeFlow[i] = 0.;
			vaneFlow[i] = 0.;
		}
		
		for ( i = 0; i < nRows; i++ ) {
		
			j = i / 2; // stage index

			kVane *= -1; //alternates between rotor/stator
				
			if ( kVane > 0 ) {
				// this is a stator
				tMetal = desVaneTemp[j];
				// Apply combustion pattern factor
				Ttg = Fl_W.Tt*K_comb[i];
				// calculate total surface being cooled

				A_blade = AR[i]*chord_blade[i]**2;
				A_blade_cs = TOC[i]*chord_blade[i]**2;
				A_surf = 2.*n_blade[i]*(A_blade-A_blade_cs)+2*3.1416*(radius_hub[i]+radius_tip[i])*length_stage[i];
				// Stanton Number Correlation
				real stage_hgt = radius_tip[i] - radius_hub[i];
				Re = V_axial*(stage_hgt/12.)*(Fl_W.rhot/Fl_W.mut);
				real y = 0.14*(Re/200000.0)**(-0.4);
				real Nu = 450.0*(Re/200000.0)**(0.7)*(Ttg/tMetal)**y;
				St = Nu/(Fl_W.Prt*Re);
				a_g = St*Fl_W.Cpt*Fl_W.W/A_cs[i];
				Bi_tbc = a_g*t_tbc_vane/l_tbc_vane; // thermal barrier coating Biot number
				phi  = ( Ttg - tMetal )/ abs( Ttg - Fl_cool.Tt );
				
				if (phi > 0.) {
				
					Bi = 1.+Bi_tbc;
					denom = Bi+Bi_m*e_f*n_cint;
					T_aw = (Bi*Ttg-e_f*(Bi*(n_cint-1.)*(Fl_cool.Tt)+Bi*Ttg-(Bi+Bi_m)*n_cint*tMetal))/denom;
					T_w = (tMetal+Bi_m*e_f*n_cint*tMetal+Bi_tbc*(Ttg+e_f*(Fl_cool.Tt-n_cint*Fl_cool.Tt-Ttg+n_cint*tMetal)))/denom;
					T_mint = (Bi*tMetal+Bi_m*(e_f*((n_cint-1.)*Fl_cool.Tt+Ttg)+tMetal-Ttg))/denom;
					Tt_cx = (n_cint*(Bi*tMetal+Bi_m*((e_f-1.)*Ttg+tMetal))-Bi*(n_cint-1.)*Fl_cool.Tt)/denom;
					m_cplus = (T_aw-T_w)/(Tt_cx-Fl_cool.Tt);
					vaneFlow[j] = m_cplus*a_g*A_surf/Fl_W.Cpt;
					//logic to ensure no locally negative flow
					if (isNaN(vaneFlow[j])) { vaneFlow[j] = 0; }
					if ( vaneFlow[j] / ( vaneFlow[j] + Fl_W.W) < 0.0001) {vaneFlow[j] = 0.0001*Fl_W.W;}
				}
				else { vaneFlow[j] = 0; } // Does not need cooling
				// correction for endwall leakage and disk/shroud cooling
				vaneFlow[j] = vaneFlow[j]*rLeak;
				// divide the cooling weight flow between chargeable/non-chargeable
				// WbleedC1 += vaneFlow[j]*(nStages-j)/nStages;
				// WbleedC2 += vaneFlow[j]*(j/nStages);
				if(i==0) { WbleedC1 += vaneFlow[j]; }
				else { WbleedC2 += vaneFlow[j]; }
				
				// determine the enthalpy after this stage from an energy balance
				real ht = ( Fl_W.W * Fl_W.ht + vaneFlow[j] * Fl_cool.ht )/( Fl_W.W + vaneFlow[j] );
	  
				// update the working station, assume pressure varies linearly
				Fl_W.W += vaneFlow[j];
				Fl_W.setTotal_hP( ht, ( Fl_I.Pt - ( Fl_I.Pt - Fl_O.Pt ) * (i+1) / nRows ) );
			}
			else {
				// this is a rotor
				tMetal = desBladeTemp[j];
				
				// calculate the relative stagnation properties
				length_blade = radius_tip[i] - radius_hub[i];
				U_mean = Sh_O.Nmech*2.*(3.1416/60.)*(radius_hub[i]+length_blade/2.)/12.;
				V_tangential = (dH*778.169*32.174/Fl_W.W)/(2.*U_mean) + U_mean/2.;
				Ttg_rel = Fl_W.Tt +(U_mean*U_mean)/(2.*(Fl_W.Cpt*778.169*32.174))*(1.-2.*V_tangential/U_mean);
				V_rel = ((V_tangential-U_mean)**2.+V_axial**2.)**0.5;
				Ttg = Ttg_rel*K_comb[i];
				
				// calculate total surface being cooled
				A_blade = AR[i]*chord_blade[i]**2;
				A_blade_cs = TOC[i]*chord_blade[i]**2;
				A_surf = n_blade[i]*(2.*A_blade-A_blade_cs)+2.*3.1416*(radius_hub[i]+radius_tip[i])*length_stage[i];
				
				// Stanton Number Correlation
				stage_hgt = radius_tip[i] - radius_hub[i];
				Re = V_rel*(stage_hgt/12.)*Fl_W.rhot/Fl_W.mut;
				y = 0.14*(Re/200000.0)**(-0.4);
				Nu = 450.0*(Re/200000.0)**(0.7)*(Ttg/tMetal)**y;
				St = Nu/(Fl_W.Prt*Re);
				a_g = St*Fl_W.Cpt*Fl_W.W/A_cs[i];
				Bi_tbc = a_g*t_tbc_rotor/l_tbc_rotor; //thermal barrier coating Biot number
				phi  = ( Ttg - tMetal )/ abs( Ttg - Fl_cool.Tt );
				
				if (phi > 0.) {
					Bi = 1.+Bi_tbc;
					denom = Bi+Bi_m*e_f*n_cint;
					T_aw = (Bi*Ttg-e_f*(Bi*(n_cint-1.)*(Fl_cool.Tt)+Bi*Ttg-(Bi+Bi_m)*n_cint*tMetal))/denom;
					T_w = (tMetal+Bi_m*e_f*n_cint*tMetal+Bi_tbc*(Ttg+e_f*(Fl_cool.Tt-n_cint*Fl_cool.Tt-Ttg+n_cint*tMetal)))/denom;
					T_mint = (Bi*tMetal+Bi_m*(e_f*((n_cint-1.)*Fl_cool.Tt+Ttg)+tMetal-Ttg))/denom;
					Tt_cx = (n_cint*(Bi*tMetal+Bi_m*((e_f-1.)*Ttg+tMetal))-Bi*(n_cint-1.)*Fl_cool.Tt)/denom;
					m_cplus = (T_aw-T_w)/(Tt_cx-Fl_cool.Tt);
					bladeFlow[j] = m_cplus*a_g*A_surf/Fl_cool.Cpt;
					//logic to ensure no locally negative flow
					if (isNaN(   bladeFlow[j]  )   ) { bladeFlow[j] = 0; }
                    if ( bladeFlow[j] / ( bladeFlow[j] + Fl_W.W) < 0.0001) {bladeFlow[j] = 0.0001*Fl_W.W;}	
				}
				else { bladeFlow[j] = 0; }
				
				// Correction for endwall leakage and disk/shroud cooling
				bladeFlow[j] = bladeFlow[j]*rLeak;
				
				// divide the cooling weight flow between chargeable/non-chargeable
				// WbleedC1 += bladeFlow[j]*(nStages-j-1)/nStages;
				// WbleedC2 += bladeFlow[j]*(j+1)/nStages;
				WbleedC2 += bladeFlow[j];
				
				//determine the enthalpy after this stage from an energy balance
				ht = ( Fl_W.W * Fl_W.ht + bladeFlow[j] * Fl_cool.ht - dH)/( Fl_W.W + bladeFlow[j] );
				
				//update the working station, assume pressure varies linearly
				Fl_W.W += bladeFlow[j];
				Fl_W.setTotal_hP( ht, ( Fl_I.Pt - ( Fl_I.Pt - Fl_O.Pt ) * (i+1) / nRows ) );
			}
		}
		
		//Apply xFactors to total cooling flow
		WbleedC1 *= xFactor1;
		WbleedC2 *= xFactor;
		if(WbleedC2 < 0.1){
			WbleedC2 = 0.01 * WbleedC1;
		}
	}
}