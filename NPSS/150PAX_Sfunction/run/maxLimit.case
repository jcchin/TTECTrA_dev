// This is the case file for getting the maximum limits for the engine

//-------------------------------------------------------------------------------------------------
// Maximum Ps3 limit case
//-------------------------------------------------------------------------------------------------
real max_Ps3_limit, max_Nc_limit, max_Nf_limit; // Defining the necessary variables for maximum limits

// Turning on the guess tables and declaring PC as the power management variable
setOption( "switchGuess", "ON" );
setOption( "switchGuessType", "PC" );

#ifdef GEAREDFAN
// Turning the VAFN on
setOption( "switchVAFN", "ON" );

// Turning the VAFN schedule on
setOption( "switchVAFNSchedule", "ON" );
#endif

PC = 50;

Ambient.alt = -2000;
Ambient.MN = 0.50;
Ambient.dTs = -30;
RunMaxPower();

// Ps3 Max limit at -2,000 ft, Mach number 0.5, and dTs = -30F
cout << "\nMaximum Ps3 limit: " << FS_3.Ps << " psia" << endl;
max_Ps3_limit = FS_3.Ps;

//-------------------------------------------------------------------------------------------------
// Maximum Nf and Nc limit case
//-------------------------------------------------------------------------------------------------
// Running the max Nc case at 2,000 ft, MN = 0.65, and dTs = 0
Ambient.alt = 2000;
Ambient.MN = 0.65;
Ambient.dTs = 0.0;
RunMaxPower();

// Max Nc limit at 2,000 ft, Mach number 0.65, and dTs = 0
// Increasing by 10%
cout << "Maximum Nc limit: " << HP_Shaft.Nmech * 110 / 100 << " RPM" << endl;
max_Nc_limit = HP_Shaft.Nmech * 110 / 100;

// Running the first max Nf case at 8,000 ft, Mach number 0.75, and dTs=0
Ambient.alt = 8000;
Ambient.MN = 0.75;
RunMaxPower();

// First Nf Max candidate point at 8,000 ft, Mach number 0.75, and dTs=0
real Nf_1 = LP_Shaft.Nmech;

// Running the second max Nf case at 8,000 ft, Mach number 0.75, and dTs=0
Ambient.alt = 16000;
Ambient.MN = 0.80;
RunMaxPower();

// Second Nf Max candidate point at 16,000 ft, Mach number 0.80, and dTs=0
real Nf_2 = LP_Shaft.Nmech;

// Comparing two Nf maximum limit candidates and selecting the larger one and 
// increasing it by 10%
if(Nf_1 > Nf_2){

	cout << "Maximum Nf limit: " << Nf_1 * 110 / 100 << " RPM" << endl;
	max_Nf_limit = Nf_1 * 110 / 100;
	
} else {

	cout << "Maximum Nf limit: " << Nf_2 * 110 / 100 << " RPM" << endl;
	max_Nf_limit = Nf_2 * 110 / 100;

}

// Returning back to SLS maximum thrust condition
setOption( "switchGuess", "ON" );
setOption( "switchGuessType", "PC" );
PC = 50;
Ambient.alt = 0.0;
Ambient.MN = 0.0;
Ambient.dTs = 0.0;
RunMaxPower();
