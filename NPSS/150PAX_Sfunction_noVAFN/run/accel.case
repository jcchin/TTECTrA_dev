// This case file runs the model in transient with an acceleration schedule 
// at SLS, SL hot day take off, and 6,000 ft hot day take off 

// Minimum and maximum values for the transient driver
// Computed from steady state operation limits
real driver_min, driver_max;

//-------------------------------------------------------------------------------------------------
// Steep ramp in demand with acceleration schedule and HPC stall constraint
// at SLS  
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
//  Running off-design for transient input limits
//-------------------------------------------------------------------------------------------------
// Inputting the flight conditions - SLS
Ambient.alt = 0.0;
Ambient.MN = 0.0;
Ambient.dTs = 0.0;

// Setting up the guess logic
setOption( "switchGuess", "ON" );
setOption( "switchGuessType", "PC" );

// Turning the VAFN off
setOption( "switchVAFN", "ON" );

// Turning the VAFN schedule off
setOption( "switchVAFNSchedule", "OFF" );

// Running for maximum thrust
PC = 50;
RunMaxPower();
// printPride();
// CaseView_SS.update();
// page.display();

if(solver.converged == 1 && errHandler.numErrors == 0) {

	cout << "\nMaximum thrust at SLS successful!\n" << endl;

	cout << "Fnet: " << Perf.myFn << "\n" << endl;

	cout << "Fan NcPct: " << Fan.NcPct << endl;
	cout << "LPC NcPct: " << LPC.NcPct << endl;
	cout << "HPC NcPct: " << HPC.NcPct << endl;

	cout << "\nNL: " << LP_Shaft.Nmech << endl;
	cout << "NH: " << HP_Shaft.Nmech << endl;

	cout << "\n" << "Maximum fuel flow rate: " << Burner.Wfuel << endl;

	// Recording the transient driver for the maximum power setting
	// driver_max = Fan.NcPct;
	// driver_max = LPC.NcPct;
	// driver_max = HPC.NcPct;
	driver_max = Burner.Wfuel;

}else{

	cout << "\nMaximum thrust at SLS failed!\n" << endl;
	errHandler.clear();

}

// Running for idle
PC = 21;
run_current_point();
// printPride();
// CaseView_SS.update();
// page.display();

if(solver.converged == 1 && errHandler.numErrors == 0){

	cout << "\nIdle at SLS successful!\n" << endl;

	cout << "Fnet: " << Perf.myFn << "\n" << endl;

	cout << "Fan NcPct: " << Fan.NcPct << endl;
	cout << "LPC NcPct: " << LPC.NcPct << endl;
	cout << "HPC NcPct: " << HPC.NcPct << endl;

	cout << "\nNL: " << LP_Shaft.Nmech << endl;
	cout << "NH: " << HP_Shaft.Nmech << endl;

	cout << "\n" << "Min fuel flow rate: " << Burner.Wfuel << endl;

	// Recording the transient driver for idle
	// driver_min = Fan.NcPct;
	// driver_min = LPC.NcPct;
	// driver_min = HPC.NcPct;
	driver_min = Burner.Wfuel;

}else{

	cout << "\nIdle at SLS failed!\n" << endl;
	errHandler.clear();

}

// CaseView_SS.display();

//-------------------------------------------------------------------------------------------------
// Running transient at SLS
//-------------------------------------------------------------------------------------------------
// Adding the constraints to the solver
trans_Condition.addConstraint("accel_limit", "MAX",1,1);
trans_Condition.addConstraint("HPC_SMW_Limit" ,"MAX",1,-1);

// Setting up the solver for transient mode
transient_setup();

// Changing the name of the transient out file name
caseRow.filename = "transientRunsSLS.out";

// Adding the transient out file stream to the execution sequence
solver.postExecutionSequence.append("CaseView");

cout << "\nRunning transient now!\n" << endl;

// Total transient simulation time
transient.stopTime = 20.0;
// transient.stopTime = 0.015;

// Solver tolerance scalar for transient run
transient.toleranceScaleFactor=100.0;

// transient.maxIterations = 5;

run();
// printPride();
CaseView.display();

cout << "Finished running transient now!\n" << endl;

cout << "Time: " << time << "\n" << endl;

cout << "Fnet: " << Perf.myFn << "\n" << endl;

cout << "Fan NcPct: " << Fan.NcPct << endl;
cout << "LPC NcPct: " << LPC.NcPct << endl;
cout << "HPC NcPct: " << HPC.NcPct << endl;

cout << "\nNL: " << LP_Shaft.Nmech << endl;
cout << "NH: " << HP_Shaft.Nmech << endl;

cout << "\n" << "Min fuel flow rate: " << Burner.Wfuel << endl;

cout << "\n-------------------------------------------------------------------------------------------------" << endl;

/*

//-------------------------------------------------------------------------------------------------
// Steep ramp in demand with acceleration schedule and HPC stall constraint
// at SL hot day take off  
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Switching solver from transient to steady state
//-------------------------------------------------------------------------------------------------
// Clearing post execution sequence from the transient out file stream
solver.postExecutionSequence = {};

// Setting up the solver for steady state
SS_Setup();

//-------------------------------------------------------------------------------------------------
//  Running off-design for transient input limits
//-------------------------------------------------------------------------------------------------
// Setting up the guess logic type
setOption( "switchGuessType", "PC" );

// Inputting the flight condition
Ambient.MN = 0.25;
Ambient.dTs = 50;

// Running for maximum thrust
PC = 50;
RunMaxPower();
// printPride();
// CaseView_SS.update();
// page.display();

if(solver.converged == 1 && errHandler.numErrors == 0) {

	cout << "\nMaximum thrust at SL hot day take off successful!\n" << endl;

	cout << "Fnet: " << Perf.myFn << "\n" << endl;

	cout << "Fan NcPct: " << Fan.NcPct << endl;
	cout << "LPC NcPct: " << LPC.NcPct << endl;
	cout << "HPC NcPct: " << HPC.NcPct << endl;

	cout << "\nNL: " << LP_Shaft.Nmech << endl;
	cout << "NH: " << HP_Shaft.Nmech << endl;

	cout << "\n" << "Maximum fuel flow rate: " << Burner.Wfuel << endl;

	// Recording the transient driver for the maximum power setting
	// driver_max = Fan.NcPct;
	// driver_max = LPC.NcPct;
	// driver_max = HPC.NcPct;
	driver_max = Burner.Wfuel;

}else{

	cout << "\nMaximum thrust at SL hot day take off failed!\n" << endl;
	errHandler.clear();

}

// Running for idle
PC = 21;
run_current_point();
// printPride();
// CaseView_SS.update();
// page.display();

if(solver.converged == 1 && errHandler.numErrors == 0){

	cout << "\nIdle at SL hot day take off successful!\n" << endl;

	cout << "Fnet: " << Perf.myFn << "\n" << endl;

	cout << "Fan NcPct: " << Fan.NcPct << endl;
	cout << "LPC NcPct: " << LPC.NcPct << endl;
	cout << "HPC NcPct: " << HPC.NcPct << endl;

	cout << "\nNL: " << LP_Shaft.Nmech << endl;
	cout << "NH: " << HP_Shaft.Nmech << endl;

	cout << "\n" << "Min fuel flow rate: " << Burner.Wfuel << endl;

	// Recording the transient driver for idle
	// driver_min = Fan.NcPct;
	// driver_min = LPC.NcPct;
	// driver_min = HPC.NcPct;
	driver_min = Burner.Wfuel;

}else{

	cout << "\nIdle at SL hot day take off failed!\n" << endl;
	errHandler.clear();

}

// CaseView_SS.display();

//-------------------------------------------------------------------------------------------------
// Running transient at SL hot day take off
//-------------------------------------------------------------------------------------------------
// No need to add constraints to the transient dependent 
// because they are already added for the previous transient run 

// Setting up the solver for transient mode
transient_setup();

// Changing the name of the transient out file name
caseRow.filename = "transientRunsSLHDTKO.out";

// Adding the transient out file stream to the execution sequence
solver.postExecutionSequence.append("CaseView");

cout << "\nRunning transient now!\n" << endl;

// Total transient simulation time
transient.stopTime = 20.0;

// Solver tolerance scalar for transient run
transient.toleranceScaleFactor=100.0;

run();
// printPride();
CaseView.display();

cout << "Finished running transient now!\n" << endl;

cout << "Time: " << time << "\n" << endl;

cout << "Fnet: " << Perf.myFn << "\n" << endl;

cout << "Fan NcPct: " << Fan.NcPct << endl;
cout << "LPC NcPct: " << LPC.NcPct << endl;
cout << "HPC NcPct: " << HPC.NcPct << endl;

cout << "\nNL: " << LP_Shaft.Nmech << endl;
cout << "NH: " << HP_Shaft.Nmech << endl;

cout << "\n" << "Min fuel flow rate: " << Burner.Wfuel << endl;

cout << "\n-------------------------------------------------------------------------------------------------" << endl;

//-------------------------------------------------------------------------------------------------
// Steep ramp in demand with acceleration schedule and HPC stall constraint
// at 6,000 ft hot day take off  
//-------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------
// Switching solver from transient to steady state
//-------------------------------------------------------------------------------------------------
// Clearing post execution sequence from the transient out file stream
solver.postExecutionSequence = {};

// Setting up the solver for steady state
SS_Setup();

//-------------------------------------------------------------------------------------------------
//  Running off-design for transient input limits
//-------------------------------------------------------------------------------------------------
// Setting up the guess logic type
setOption( "switchGuessType", "PC" );

// Inputting the flight condition
Ambient.alt = 6000;

// Running for maximum thrust
PC = 50;
RunMaxPower();
// printPride();
// CaseView_SS.update();
// page.display();

if(solver.converged == 1 && errHandler.numErrors == 0) {

	cout << "\nMaximum thrust at 6,000 ft hot day take off successful!\n" << endl;

	cout << "Fnet: " << Perf.myFn << "\n" << endl;

	cout << "Fan NcPct: " << Fan.NcPct << endl;
	cout << "LPC NcPct: " << LPC.NcPct << endl;
	cout << "HPC NcPct: " << HPC.NcPct << endl;

	cout << "\nNL: " << LP_Shaft.Nmech << endl;
	cout << "NH: " << HP_Shaft.Nmech << endl;

	cout << "\n" << "Maximum fuel flow rate: " << Burner.Wfuel << endl;

	// Recording the transient driver for the maximum power setting
	// driver_max = Fan.NcPct;
	// driver_max = LPC.NcPct;
	// driver_max = HPC.NcPct;
	driver_max = Burner.Wfuel;

}else{

	cout << "\nMaximum thrust at 6,000 ft hot day take off failed!\n" << endl;
	errHandler.clear();

}

// Running for idle
PC = 21;
RunIdle();
// printPride();
// CaseView_SS.update();
// page.display();

if(solver.converged == 1 && errHandler.numErrors == 0){

	cout << "\nIdle at 6,000 ft hot day take off successful!\n" << endl;

	cout << "Fnet: " << Perf.myFn << "\n" << endl;

	cout << "Fan NcPct: " << Fan.NcPct << endl;
	cout << "LPC NcPct: " << LPC.NcPct << endl;
	cout << "HPC NcPct: " << HPC.NcPct << endl;

	cout << "\nNL: " << LP_Shaft.Nmech << endl;
	cout << "NH: " << HP_Shaft.Nmech << endl;

	cout << "\n" << "Min fuel flow rate: " << Burner.Wfuel << endl;

	// Recording the transient driver for idle
	// driver_min = Fan.NcPct;
	// driver_min = LPC.NcPct;
	// driver_min = HPC.NcPct;
	driver_min = Burner.Wfuel;

}else{

	cout << "\nIdle at 6,000 ft hot day take off failed!\n" << endl;
	errHandler.clear();

}

// CaseView_SS.display();

//-------------------------------------------------------------------------------------------------
// Running transient at 6,000 ft hot day take off
//-------------------------------------------------------------------------------------------------
// No need to add constraints to the transient dependent 
// because they are already added for the previous transient run 

// Changing a solver setting for this run
trans_indep.dxLimitType = "ABSOLUTE";

// Setting up the solver for transient mode
transient_setup();

// Changing the name of the transient out file name
caseRow.filename = "transientRunsHAHDTKO.out";

// Adding the transient out file stream to the execution sequence
solver.postExecutionSequence.append("CaseView");

cout << "\nRunning transient now!\n" << endl;

// Total transient simulation time
transient.stopTime = 20.0;

// Solver tolerance scalar for transient run
transient.toleranceScaleFactor=1000.0;

run();
// printPride();
CaseView.display();

cout << "Finished running transient now!\n" << endl;

cout << "Time: " << time << "\n" << endl;

cout << "Fnet: " << Perf.myFn << "\n" << endl;

cout << "Fan NcPct: " << Fan.NcPct << endl;
cout << "LPC NcPct: " << LPC.NcPct << endl;
cout << "HPC NcPct: " << HPC.NcPct << endl;

cout << "\nNL: " << LP_Shaft.Nmech << endl;
cout << "NH: " << HP_Shaft.Nmech << endl;

cout << "\n" << "Min fuel flow rate: " << Burner.Wfuel << endl;

cout << "\n-------------------------------------------------------------------------------------------------" << endl;

// Returning back to SLS maximum thrust condition
setOption( "switchGuess", "ON" );
setOption( "switchGuessType", "PC" );
PC = 50;
Ambient.alt = 0.0;
Ambient.MN = 0.0;
Ambient.dTs = 0.0;
RunMaxPower();

*/