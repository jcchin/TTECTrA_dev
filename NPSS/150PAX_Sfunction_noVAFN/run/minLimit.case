// This is the case file for getting the minimum limits for the engine

real min_RU_limit, min_Ps3_limit; // Defining the necessary variables for minimum limits

//-------------------------------------------------------------------------------------------------
// Minimum RU limit case
//-------------------------------------------------------------------------------------------------
// Turning on the guess tables and declaring PC as the power management variable
setOption( "switchGuess", "ON" );
setOption( "switchGuessType", "PC" );

// Turning the VAFN off
setOption( "switchVAFN", "ON" );

// Turning the VAFN schedule off
setOption( "switchVAFNSchedule", "OFF" );

// Use PC in the guess logic for idle definition
PC = 21;

// Running the minimum RU limit at 38,000 ft, MN = 0.70, and dTs = 0.0
Ambient.alt = 38000;
Ambient.MN = 0.70;
Ambient.dTs = 0.0;
RunIdle();

cout << "\nMin RU Limit: " << Burner.Wfuel / FS_3.Ps << " lbm/(psia-s)" << endl;
min_RU_limit = Burner.Wfuel / FS_3.Ps;

//-------------------------------------------------------------------------------------------------
// Minimum Ps3 limit case
//-------------------------------------------------------------------------------------------------
// Running the minimum Ps3 limit at 40,000 ft, MN = 0.65, and dTs = 0.0
Ambient.alt = 40000;
Ambient.MN = 0.65;
RunIdle();

cout << "Min Ps3 Limit: " << FS_3.Ps << " psia" << endl;
min_Ps3_limit = FS_3.Ps;

// Returning back to SLS maximum thrust condition
setOption( "switchGuess", "ON" );
setOption( "switchGuessType", "PC" );
PC = 50;
Ambient.alt = 0.0;
Ambient.MN = 0.0;
Ambient.dTs = 0.0;
RunMaxPower();