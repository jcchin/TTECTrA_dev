// This case file runs the model throughout the flight envelope and
// generates linear models about points of interest

#ifdef TTECTrA //NASA Method
	#include <TTECTrA_SP.input>	//Input from Matlab
	// Turning the guess logic off
	setOption( "switchGuess", "ON" );
	setOption( "switchGuessType", "Fnet" );
	
	// Turning the VAFN on or off
	setOption( "switchVAFN", "ON" );

	// Turning the VAFN schedule on or off
	setOption( "switchVAFNSchedule", "ON" );
	//----------------------------------------------------------------------------------
	// TTECTrA PWLM - Linearization at each point requested from Matlab
	//----------------------------------------------------------------------------------
	//real Fan_NcPct_targets[]={100, 90, 80, 70, 60, 50, 40, 30, 25}; 
	SS_Setup();

	// solver.removeIndependent("FAR");
    // solver.removeDependent("Run_Condition");

	solver.addIndependent("FAR");
    solver.addDependent("Run_Condition_Thrust");

	int z;
	// cout << solver.independentNames << " " << solver.dependentNames << endl; //debug
	for ( z=0; z < myFn_targets.entries(); ++z ) { //loop through myFn_targets
	    TargetThrust = myFn_targets[z];
		Fnet = TargetThrust;
		run();		
		
	    //run_linear();
		linear_model();

		// PC = 21;
		// RunIdle();
		// run_current_point();
		// linear_model();

		solver.addIndependent("FAR");
		solver.addDependent("Run_Condition_Thrust");

	}
	// Returning back to SLS maximum thrust condition
	// Turning the guess logic back on
	setOption( "switchGuess", "ON" );
	setOption( "switchGuessType", "PC" );
	PC = 50;
	Ambient.alt = 0.0;
	Ambient.MN = 0.0;
	Ambient.dTs = 0.0;
	RunMaxPower();
#endif

#ifndef TTECTrA  //Georgia Tech Method

	//----------------------------------------------------------------------------------
	//  Refactored GT Method - Linearization at power hook at multiple flight conditions
	//                 SLS  HTKO  TKO ----------------------------------> Cruise
	//----------------------------------------------------------------------------------

	// Setting up the guess logic
	setOption( "switchGuess", "ON" );
	setOption( "switchGuessType", "PC" );
	
	// Turning the VAFN on or off
	setOption( "switchVAFN", "ON" );

	// Turning the VAFN schedule on or off
	setOption( "switchVAFNSchedule", "OFF" );
	
	real alt_targets[]={0,    0, 5000, 10000, 15000, 20000, 25000, 30000, 35000};
	real MN_targets[]= {0, 0.25, 0.40,  0.50,  0.65,  0.65,  0.65,  0.75,  0.80};
	real dTs_targets[]={0,   50,    0,     0,     0,     0,     0,     0,     0};

	real Pwr_targets[]={90, 80, 70, 60, 50, 40, 30};
	real PC_targets[]={48,44,40,38,35,30,28,25}; 
	int y,z;

	for ( y=0; y < alt_targets.entries(); ++y ) {
		Ambient.alt = alt_targets[y];
		Ambient.MN = MN_targets[y];
		Ambient.dTs = dTs_targets[y];

		PC = 50;
		RunMaxPower();
		linear_model();
		
		for ( z=0; z < PC_targets.entries(); ++z ) { //loop through Fan_NcPct_targets
		    //RunPartPower(Pwr_targets[z]);
		    PC = PC_targets[z];
		    run_current_point();
			linear_model();
		}

		PC = 21;
		// RunIdle();
		run_current_point();
		linear_model();
	}
	// Returning back to SLS maximum thrust condition
	setOption( "switchGuess", "ON" );
	setOption( "switchGuessType", "PC" );
	PC = 50;
	Ambient.alt = 0.0;
	Ambient.MN = 0.0;
	Ambient.dTs = 0.0;
	RunMaxPower();
	
#endif