// I N S T A L L E D   I N L E T   E L E M E N T

// This element is designed to provide values for drag due to
// installation effects as well as the standard ram drag. In addition
// to the standard Fl_O port, this element provides outlet ports
// for bleed and bypass airflow.

class InstalledInlet extends Element { 

  // I N P U T   P A R A M E T E R S

  real Wengine { 
	 value = 100.0 ;
	 IOstatus = "input" ;
	 description = "Airflow into the engine." ;
	 units = "LBM/SEC" ; 
  } 
  real eRam { 
	 value = 1.0 ;
	 IOstatus = "input" ;
	 description = "Inlet pressure recovery" ;
  }   
  real Wbleed { 
	 value = 0.0;             // was 1.0 R. Denney 11-22-04
	 IOstatus = "input" ;
	 description = "Inlet stabilization airflow" ;
	 units = "LBM/SEC" ; 
  } 
  real Wbypass { 
	 value = 0.0 ;           // was 1.0 R. Denney 11-22-04
	 IOstatus = "input" ;
	 description = "Inlet bypass airflow" ;
	 units = "LBM/SEC" ; 
  }   

  // O U T P U T   P A R A M E T E R S 


  real Afs { 
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Freestream tube area of the air into the inlet." ;
	 units = "IN2" ; 
  }
  real Dinstall { 
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Drag due to installation effects." ;
	 units = "LBF" ; 
  } 
  real Fram { 
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Freestream ram drag." ;
	 units = "LBF" ; 
  } 
  real Fram_local { 
	 value = 0.0 ;
	 IOstatus = "output" ;
	 description = "Ram drag based on localized conditions." ;
	 units = "LBF" ; 
  } 
  real MNlocal {
	 value = 0.00 ;
	 IOstatus = "output" ;
	 description = "Local MN, may not equal ambient MN due to airframe effects" ;
  }  
  real PtLocal {
	 value = 0.00 ;
	 IOstatus = "output" ;
	 description = "Local Pt, may not equal ambient Pt due to airframe effects" ;
	 units = "PSIA" ;
  }   
  real TtLocal {
	 value = 0.00 ;
	 IOstatus = "output" ;
	 description = "Local Tt, may not equal ambient Tt due to airframe effects" ;
	 units = "R" ;
  }  
  real W0I { 
	 value = 100.0 ;
	 IOstatus = "output" ;
	 description = "Total airflow into the inlet = engine + bleed + bypass" ;
	 units = "LBM/SEC" ; 
  }
  real W0 {
	 value = 100.0 ;
	 IOstatus = "output" ;
	 description = "Airflow available to the engine = engine + bypass" ;
	 units = "LBM/SEC" ; 
  }


  // O P T I O N   A N D   T R I G G E R   P A R A M E T E R S   


  // F L U I D   P O R T S 

  FluidInputPort  Fl_I ;
  FluidOutputPort Fl_O ;
  FluidOutputPort BleedOut ;
  FluidOutputPort BypassOut ;

  // I N T E R N A L   F L U I D   S T A T I O N S

  FlowStation LocalIn ;

  // S O C K E T S

  Socket S_localProp {
	 allowedValues = { "MNlocal", "PtLocal", "TtLocal" }
  }

  Socket S_install {
	 allowedValues = { "eRam", "Dinstall", "Wbleed", "Wbypass", "W0", 
							 "W0I" }
  }

//------------------------------------------------------------
//  ******  ADD SOLVER INDEPENDENTS & DEPENDENTS  ******
//------------------------------------------------------------
  
  Independent ind_Weng { 
    varName = "Wengine"; 
    description = "Engine airflow";  
    autoSetup = TRUE; 
  } 

  Dependent dep_inletFlowErr { 
    eq_lhs = "Fl_I.W"; 
    eq_rhs = "W0I"; 
    description = "Error between system demand air and inlet supplied air";
    autoSetup = TRUE; 
  } 


  void calculate() {

	 // Obtain local conditions. If there is a subelement in the
	 // S_localProp socket, then run it. The subelement in the socket
	 // should set the local value of MN, Pt and Tt. If there isn't
	 // one, but the user has input a simple local vs freestream table,
	 // then evaluate it and assume the shock is weak enough that Pt
	 // and Tt are essentually constant. 

	 if(!S_localProp.isEmpty()) {
		S_localProp.run() ;
	 }
	 else {
		real MNfree = Fl_I.MN;
		MNlocal = Tb_localMN(MNfree) ;
		PtLocal = Fl_I.Pt ;
		TtLocal = Fl_I.Tt ;
	 }

	 // Copy the freestream conditions to the local and update with
	 // the new values of local Mach number, total temperature and
	 // total pressure.

	 LocalIn.copyFlow("Fl_I") ;
	 LocalIn.MN = MNlocal ;
	 LocalIn.setTotalTP(TtLocal, PtLocal) ;

	 // Run the installation subelment in the socket if there is one

	 if(!S_install.isEmpty()) {
		S_install.run() ;
	 }
	 else {

		// If there isn't a subelement in the socket, then W0 and
		// W0I, which would otherwise would be calculated by the
		// subelement need to be calculated. Use the default or user
		// supplied value of Wbypass and Wbleed

		// Total the WengDemand and the Wbypass to get the total flow
		// supplied to the engine.

		W0 = Wengine + Wbypass ;

		// Add the bleed mass flow to the supply flow to get the total
		// mass flow into the inlet.

		W0I = W0 + Wbleed ;
	 }

	 // Save the physical area of the Fl_I station as the freestream area

	 Afs = Fl_I.Aphy ;

	 // Calculate the outlet total pressure. Assume that the same
	 // total pressure for the main fluidOut and the bleedOut and
	 // bypassOut ports.  Assume pressure recovery is defined based 
	 // on local conditions.
	  
	 real PtOut = eRam * LocalIn.Pt ;

	 // Calculate the ram drag 

	 // ****** NOTE: Can't access the constant GRAVITY, replace the
	 // 32.17 as soon as possible with reference to a constant

	 //	 _Fram = flowStatIn->getWflow()*flowStatIn->getVflow()/GRAVITY;

	 Fram = (Wengine * Fl_I.Vflow) / 32.174 ;
	 Fram_local = (Wengine * LocalIn.Vflow) / 32.174 ;

	 // Copy the flow information from the inlet to the three outlet
	 // ports

	 Fl_O.copyFlow("LocalIn") ;
	 BleedOut.copyFlow("LocalIn") ;
	 BypassOut.copyFlow("LocalIn") ;

	 // Update the outlet fluid ports with the calculated outlet total
	 // pressure and the local total enthalpy for the inlet (which is
	 // assumed to be constant)

	 Fl_O.setTotal_hP(LocalIn.ht, PtOut) ;
	 BleedOut.setTotal_hP(LocalIn.ht, PtOut) ;
	 BypassOut.setTotal_hP(LocalIn.ht, PtOut) ;

	 // Set the flow rates in the ports.

	 Fl_O.W = Wengine ;
	 BleedOut.W = Wbleed ;
	 BypassOut.W = Wbypass ;


  }
}
